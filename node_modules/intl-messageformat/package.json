{
  "name": "intl-messageformat",
  "version": "0.0.1",
  "description": "implementation of the ECMA 402 proposal for MessageFormat",
  "keywords": [
    "intl",
    "i18n",
    "MessageFormat"
  ],
  "author": {
    "name": "Anthony Pipkin",
    "email": "a.pipkin@yahoo.com"
  },
  "contributors": [
    {
      "name": "Drew Folta",
      "email": "drew@folta.net"
    }
  ],
  "licenses": [
    {
      "type": "Yahoo BSD",
      "url": "https://github.com/yahoo/intl-messageformat/blob/master/LICENSE"
    }
  ],
  "bugs": {
    "url": "https://github.com/yahoo/intl-messageformat/issues"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:yahoo/intl-messageformat.git"
  },
  "main": "index.js",
  "directories": {
    "test": "tests"
  },
  "devDependencies": {
    "chai": "~1.8.1",
    "grunt": "~0.4.2",
    "grunt-cli": "~0.1.11",
    "grunt-contrib-jshint": "~0.7.2",
    "grunt-contrib-uglify": "~0.2.7",
    "istanbul": "~0.1.46",
    "mocha": "~1.15.1"
  },
  "optionalDependencies": {
    "cldr": "~2.0.1"
  },
  "scripts": {
    "build-data": "grunt build-data",
    "pretest": "grunt jshint build",
    "test": "istanbul cover -- _mocha tests/ --reporter spec"
  },
  "readme": "Intl Message Format Polyfill\n============================\n\n![Build Status][TRAVIS]\n\nFormat a string with placeholders, including plural and gender support to create localized messages.\n\nOverview\n--------\n\n### Goals\n\nTo provide a standardized way to concatenate strings with localization support in JavaScript on both the server and client.\n\n### Basis\nThis implementation is based on the [Strawman Draft][STRAWMAN]. There are a few places this implementation diverges from the strawman draft. One such place is the object passed to the `format` method. The strawman draft indicates that the objects should be \"flat\" - where grouping options are at the same level as the `type` and `valueName`. This, as an example, would look like:\n```\n{\n    type: \"plural\",\n    valueName: \"TRAVELER_COUNT\",\n    zero: \"No travelers\",\n    one: \"One traveler\",\n    two: \"Two travelers\",\n    few: \"There are a few travelers\",\n    many: \"There are many travelers\",\n    other: \"There are a lot of travelers\"\n}\n```\nThis implementation takes a readability approach and places grouping options in an `options` key. This looks like:\n```\n{\n    type: \"plural\",\n    valueName: \"TRAVELER_COUNT\",\n    options: {\n        zero: \"No travelers\",\n        one: \"One traveler\",\n        two: \"Two travelers\",\n        few: \"There are a few travelers\",\n        many: \"There are many travelers\",\n        other: \"There are a lot of travelers\"\n    }\n}\n```\n\nThe strawman also makes mention of built-in formatters for integers, floating point numbers and strings. These built in formatters are not in this implementation, but you may provide formatters as user defined methods as a third parameter when you instantiate the IntlMessageFormatter.\n\n### How It Works\n\nMessages are provided into the constructor as an `Array` or `String` messages.\n```javascript\nvar msg = new IntlMessageFormat(pattern, locale, [optFieldFormatters]);\n```\n\nIf a `String` is provided, it is broken up and processed into a workable `Array`. This means\n```javascript\n\"Welcome to ${CITY}, ${STATE}!\"\n```\nbecomes\n```javascript\n[\n    \"Welcome to \",\n    {\n        valueName: \"CITY\"\n    },\n    \", \"\n    {\n        valueName: \"STATE\"\n    },\n    \"!\"\n]\n```\n\nThe `Array` may contain `Strings` or pattern `Objects`. Read more about [Pattern Objects](#message-pattern-objects)\n\nThe pattern is stored internally until the `format()` method is called with an `Object` containing parameters for generating the message. The `Array` is then processed by converting pattern into strings based on the parameters provided and concatenating the values together.\n\n\n### Features\nCustom formatters can be used to format the value __after__ it is gathered from the original process. Custom formatters are stored in the message during construction as the third parameter. Formatters are denoted in the token with a colon (:) followed by the formatter name.\n\nFor example you can ensure that certain tokens are always upper cased:\n```javascript\nvar msg = new IntlMessageFormat(\"Then they yelled '${YELL:upper}!'\", \"en\", {\n    \"upper\": function (val, locale) {\n        return val.toString().toUpperCase();\n    }\n});\n\nvar m = msg.format({ YELL: \"suprise\" });\n\n// Then they yelled 'SUPRISE!'\n```\n\nInstallation\n------------\n\nInstall using npm:\n\n```shell\n$ npm install intl-messageformat\n```\n\n\nUsage\n-----\n### IntlMessageFormat Constructor\nTo create a message to format, use the IntlMessageFormat constructor. The constructor has three parameters:\n\n - **pattern** - _{String|Array}_ - Array or string that serves as formatting pattern. Use array for plural and select messages, otherwise use string form.\n\n - **locale** - _{String}_ - Locale for string formatting. The locale is optional, but it is highly encouraged to provide a locale.\n\n - **optFieldFormatters** - _{Object}_ - (optional) Holds user defined formatters for each field\n\n#### Creating a Message in Node.js\n```javascript\nvar IntlMessageFormat = require('intl-messageformat');\n\n// load some locales that you care about\nrequire('intl-messageformat/locale-data/en.js');\nrequire('intl-messageformat/locale-data/ar.js');\nrequire('intl-messageformat/locale-data/pl.js');\n\nvar msg = new IntlMessageFormat(\"My name is ${NAME}.\", \"en-US\");\n```\n\n#### Creating a Message in a Browser\n```javascript\nvar msg = new IntlMessageFormat(\"My name is ${NAME}.\", \"en-US\");\n```\n\n### Formatting a Message\n\nOnce the message is created, formatting the message is done by calling the `format` method of the instantiated object:\n\n```javascript\nvar myNameIs = msg.format({ NAME: \"Ferris Wheeler\"});\n\n// \"My name is Ferris Wheeler.\"\n```\n\n### Message Pattern Objects\nPattern objects should always at least contain a `valueName`. There are a few other items that can be included:\n\n- **`type`** _{String}_ - `plural` or `gender` to identify the grouping type\n\n- **`valueName`** _{String}_ - key to match the `format` object\n\n- **`formatter`** _{Function}_ - formatter used on the value after is discovered\n\n- **`options`** _{Object}_ - each key should be matched based on the `type` specified\n\n - **`zero`** _{String|Array}_ - (plural) Matched when `_normalizeCount` returns `\"zero\"`\n\n - **`one`** _{String|Array}_ - (plural) Matched when `_normalizeCount` returns `\"one\"`\n\n - **`two`** _{String|Array}_ - (plural) Matched when `_normalizeCount` returns `\"two\"`\n\n - **`few`** _{String|Array}_ - (plural) Matched when `_normalizeCount` returns `\"few\"`\n\n - **`many`** _{String|Array}_ - (plural) Matched when `_normalizeCount` returns `\"many\"`\n\n - **`male`** _{String|Array}_ - (gender) Matched when the `valueName` returns `\"male\"`\n\n - **`female`** _{String|Array}_ - (gender) Matched when the `valueName` returns `\"female\"`\n\n - **`neuter`** _{String|Array}_ - (gender) Matched when the `valueName` returns `\"neuter\"`\n\n - **`other`** _{String|Array}_ - (plural or gender) Matched when `_normalizeCount` returns `\"other\"`, the `valueName` returns `\"other\"` or the returned value from either of those returns a value that is not specified. For instance, if `\"male\"` is returned and `\"male\"` is not specified, other will be matched.\n\nWhen `options` is matched and returns an `Array`, that `Array` is then processed in the same manner. This means, large complex, conditional messages can be formed by defining the pattern as such.\n\nLocale Data\n-----------\n\nThis package ships with locale data for the top-level locales (e.g. `en` but not `en-US`). You can load the library and locale(s) using any of the following subpaths in the package:\n\n* Load the base and then just the locale(s) that you need: `intl-messageformat/index.js` and `intl-messageformat/locale-data/{locale}.js`.\n\n* Load the base with a single locale builtin: `intl-messageformat/build/index.{locale}.js')`. You can then optionally add more locale(s) as above.\n\n* Load all locales: `intl-messageformat/build/index.complete.js`.\n\n\n### Loading Locale Data in Node.js\n\n**Please note** that if you are loading from the `locale-data/` directory that those files are expecting the library to be available in the `IntlMessageFormat` variable.\n\n\n### Loading Locale Data in a Browser\n\nEvery `intl-messageformat/build/*.js` file also has an `intl-messageformat/build/*.min.js` equivalent which has already been minified.\n\n\nExamples\n--------\n\n\n#### Simple String\n```javascript\nvar msg = new IntlMessageFormat(\"My name is ${name}.\", \"en-US\");\n\nvar myNameIs = msg.format({ name: \"Ferris Wheeler\"});\n\n// \"My name is Ferris Wheeler.\"\n```\n\n\n#### Complex Formatting\n```javascript\nvar msg = new IntlMessageFormat(['Some text before ', {\n    type: 'plural',\n    valueName: 'NUM_PEOPLE',\n    offset: 1,\n    options: {\n        one: 'Some message ${PH} with ${#} value',\n\n        few: ['Optional prefix text for |few| ', {\n            type: 'select',\n            valueName: 'GENDER',\n            options: {\n                male: 'Text for male option with \\' single quotes',\n                female: 'Text for female option with {}',\n                other: 'Text for default'\n            }\n        }, ' optional postfix text'],\n\n        other: 'Some messages for the default'\n    }\n}, ' and text after'], \"en-US\");\n\nvar complex = msg.format({\n    NUM_PEOPLE: 4,\n    PH: 'whatever',\n    GENDER: 'male'\n});\n\n// \"Some text before Optional prefix text for |few| Text for male option with ' single quotes optional postfix text and text after\"\n```\n\n#### User Defined Formatters\nUser defined formatters are provided to the IntlMessageFormat as the third parameter. To denote a key should be process through a formatter, you need only provide the formatter name after the token key. Such as, `${key}` would then become `${key:formatter}`. This is an example of using the Intl.NumberFormat to create a currency formatter.\n\n```\nvar msg = new IntlMessageFormatter(\"I just made ${TOTAL:currency}!!\", \"en-US\", {\n    currency: function (val, locale) {\n        return new Intl.NumberFormat(val, {\n            style: 'currency',\n            currency: 'USD',\n            currencyDisplay: 'symbol'\n        });\n    }\n});\n\nvar payday = msg.format({ TOTAL: 3 });\n\n// I just made $3.00!!\n```\n\n\nAPI\n---\n\n### Constructor\n\nCreates IntlMessageFormat object from a pattern, locale and field formatters. String patterns are broken down to Arrays. Objects should match the following pattern:\n\n```javascript\n{\n    type: 'plural|gender',\n    valueName: 'string',\n    offset: 1, // consistent offsets for plurals\n    options: {}, // keys match options for plurals, gender and selects\n    formatter: 'string|function' // strings are matched to internal formatters\n}\n```\n\n**Parameters**\n\n- **`pattern`**: _{Array|String}_ `Array` or `String` that serves as formatting\npattern. An `Array` may consist of `Strings` and [Pattern Objects](#message-pattern-objects).\n\n- **`locale`**: _{String}_ Locale for string formatting and when using plurals and formatters.\n\n- **`optFieldFormatters`**: _{Object}_ Holds user defined formatters for each\nfield\n\n### Instace Methods\n\n#### format(obj)\nFormats the pattern with supplied parameters. Dates, times and numbers are formatted in locale sensitive way when used with a formatter.\n\n_PARAMETERS_\n\n- **`obj`**: _{Object}_ Object used to choose options when formatting the message\n\n\n#### resolvedOptions\nReturns resolved options, in this case supported locale.\n\n\nLicense\n-------\n\nThis software is free to use under the Yahoo! Inc. BSD license.\nSee the [LICENSE file][LICENSE] for license text and copyright information.\n\n\n\n[TRAVIS]: https://travis-ci.org/yahoo/intl-messageformat.png?branch=master\n[STRAWMAN]: http://wiki.ecmascript.org/doku.php?id=globalization:messageformatting\n[LICENSE]: https://github.com/yahoo/intl-messageformat/blob/master/LICENSE\n\n",
  "readmeFilename": "README.md",
  "dependencies": {
    "cldr": "~2.0.1"
  },
  "_id": "intl-messageformat@0.0.1",
  "dist": {
    "shasum": "6554eea346735a06f49bc51e099b9799f7ec842d"
  },
  "_resolved": "git://github.com/yahoo/intl-messageformat.git#ef59230375fa0e5f72403732d1e415f182132c8d",
  "_from": "intl-messageformat@git://github.com/yahoo/intl-messageformat.git#master"
}
