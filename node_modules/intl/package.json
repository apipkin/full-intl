{
  "name": "intl",
  "version": "0.0.2",
  "description": "Polyfill the ECMA-402 Intl API (except collation)",
  "main": "Intl.complete.js",
  "directories": {
    "test": "tests"
  },
  "devDependencies": {
    "grunt": "~0.4.2",
    "grunt-cli": "~0.1.11",
    "grunt-contrib-jshint": "~0.7.2",
    "grunt-contrib-uglify": "~0.2.7",
    "jshint": "~2.3.0"
  },
  "scripts": {
    "build": "grunt",
    "lint": "jshint Intl.js",
    "test": "cd tests && ./run402"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/andyearnshaw/Intl.js"
  },
  "keywords": [
    "intl",
    "i18n",
    "internationalization",
    "ecma402",
    "polyfill"
  ],
  "author": {
    "name": "Andy Earnshaw"
  },
  "email": "andyearnshaw@gmail.com",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/andyearnshaw/Intl.js/issues"
  },
  "readme": "In December 2012, ECMA International published the first edition of Standard ECMA-402,\nbetter known as the _ECMAScript Internationalization API_. This specification provides\nthe framework to bring long overdue localisation methods to ECMAScript implementations.\n\nGoogle have an implementation of this API that is available in recent versions of V8\nand Chrome/Chromium 24 and later. Mozilla also have a working implementation in the\ncurrent Firefox nightly builds.\n\n`Intl.js` attempts to fill the void of availability for this API. It will provide the\nframework as described by the specification, so that developers can take advantage of\nthe native API in environments that support it, or `Intl.js` for legacy or unsupporting\nenvironments.\n\n## <a id=start></a>Getting started\nFor Node.js applications, you can install Intl.js using NPM:\n\n    npm install intl\n\nIntl.js is also available as a [Bower](http://bower.io) component for the front-end:\n\n    bower install intl\n\nFor other setups, just clone the repo for the pre-built scripts and locale datafiles.\n\n## <a id=status></a>Status\nThe latest test, run on Jun 04 2013, scored 99 out of 111 in SpiderMonkey<sup>\\*</sup>.\nAlthough the majority of the failed tests are somewhat superficial, there are a few\noutstanding issues with `DateTimeFormat`.\n\nAside from 1 issue with floating point precision in Firefox/SpiderMonkey, `NumberFormat`\nseems to be rather complete.\n\nCurrent progress is as follows:\n\n### Implemented\n - All internal methods except for some that are implementation dependent\n - Checking structural validity of language tags  \n - Canonicalizing the case and order of language subtags\n - __`Intl.NumberFormat`__\n   - The `Intl.NumberFormat` constructor ([11.1](http://www.ecma-international.org/ecma-402/1.0/#sec-11.1))\n   - Properties of the `Intl.NumberFormat` Constructor ([11.2](http://www.ecma-international.org/ecma-402/1.0/#sec-11.2))\n   - Properties of the `Intl.NumberFormat` Prototype Object ([11.3](http://www.ecma-international.org/ecma-402/1.0/#sec-11.3))\n   - Properties of Intl.NumberFormat Instances([11.4](http://www.ecma-international.org/ecma-402/1.0/#sec-11.4))\n - __`Intl.DateTimeFormat`__ \n   - The `Intl.DateTimeFormat` constructor ([12.1](http://www.ecma-international.org/ecma-402/1.0/#sec-12.1))\n   - Properties of the `Intl.DateTimeFormat` Constructor ([12.2](http://www.ecma-international.org/ecma-402/1.0/#sec-12.2))\n   - Properties of the `Intl.DateTimeFormat` Prototype Object ([12.3](http://www.ecma-international.org/ecma-402/1.0/#sec-12.3))\n   - Properties of Intl.DateTimeFormat Instances([12.4](http://www.ecma-international.org/ecma-402/1.0/#sec-12.4))\n - Locale Sensitive Functions of the ECMAScript Language Specification\n   - Properties of the `Number` Prototype Object ([13.2](http://www.ecma-international.org/ecma-402/1.0/#sec-13.2))\n   - Properties of the `Date` prototype object ([13.3](http://www.ecma-international.org/ecma-402/1.0/#sec-13.3))\n\n### Not Implemented\n - `BestFitSupportedLocales` internal function\n - Implementation-dependent numbering system mappings\n - Calendars other than Gregorian\n - Collator objects (`Intl.Collator`) (see below)\n - Properties of the `String` prototype object\n\nA few of the implemented functions may currently be non-conforming and/or incomplete.  \nMost of those functions have comments marked as 'TODO' in the source code.\n\n<sup>\\*</sup> The test suite is run with Intl.Collator tests removed, and the Collator\nconstructor removed from most other tests in the suite.  Also, some of the tests cannot be\npassed from an ES5 implementation because they check for native behaviour.\n\n## What about Intl.Collator?\n\nProviding an `Intl.Collator` implementation is no longer a goal of this project. There\nare several reasons, including:\n\n - The CLDR convertor does not automatically convert collation data to JSON\n - The Unicode Collation Algorithm is more complicated that originally anticipated,\n   and would increase the code size of Intl.js too much.\n - The Default Unicode Collation Element Table is huge, even after compression, and \n   converting to a native JavaScript object would probably make it slightly larger.\n   Server-side JavaScript environments will (hopefully) soon support Intl.Collator,\n   and we can't really expect client environments to download this data.\n\n## Compatibility\nIntl.js is designed to be compatible with ECMAScript 3.1 environments in order to\nfollow the specification as closely as possible. However, some consideration is given\nto legacy (ES3) environments, and the goal of this project is to at least provide a\nworking, albeit non-compliant implementation where ES5 methods are unavailable.\n\n## Locale Data\n`Intl.js` uses the Unicode CLDR locale data, as recommended by the specification.\nThe data is available in JSON format, or JSONP format in the [locale-data](https://github.com/andyearnshaw/Intl.js/tree/master/locale-data)\nfolder.  This has been converted from CLDR version 23.1 using the script and config file\nin the [tools](https://github.com/andyearnshaw/Intl.js/tree/master/tools) folder.\n\nThe main `Intl.js` file contains no locale data itself.  In browser environments, the\ndata should be provided, parsed into a JavaScript object, using the\n`Intl.__addLocaleData()` method.  In Node.js, or when using `Intl.complete.js`, the data\nis pre-compiled into the end of the file and does not need to be provided.\n\nContents of the `locale-data` directory are a modified form of the Unicode CLDR\ndata found at http://www.unicode.org/cldr/data/.  See the `LICENSE.txt` file\naccompanying this software for terms of use.\n\n\n## Contribute\n\nSee the [CONTRIBUTING file][] for info.\n\n[CONTRIBUTING file]: https://github.com/andyearnshaw/Intl.js/blob/master/CONTRIBUTING.md\n\n\n## License\n\nCopyright (c) 2013 Andy Earnshaw\n\nThis software is licensed under the MIT license.  See the `LICENSE.txt` file\naccompanying this software for terms of use.\n",
  "readmeFilename": "README.md",
  "_id": "intl@0.0.2",
  "_from": "intl@0.x"
}
